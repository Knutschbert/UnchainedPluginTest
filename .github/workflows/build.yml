name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags, e.g., v1.0.0
  workflow_dispatch:  # Allow manual trigger of the workflow

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      
      - name: Generate and Print Commit Summary
        id: get_prev_tag
        shell: bash
        run: |
          echo "Previous_Tag=$(git tag --sort=-creatordate | sed -n 2p)" >> $GITHUB_OUTPUT

      - name: Generate and Print Commit Summary
        id: generate_summary
        shell: bash
        run: |
          new_tag=${{ github.ref }}
          # Remove the 'refs/tags/' prefix from the tag
          new_tag="${new_tag#refs/tags/}"

          # Find the previous tag
          previous_tag=$(git tag --sort=-creatordate | sed -n 2p)

          # Print the current and previous tags for debugging
          echo "Current tag: $new_tag"
          echo "Previous tag: ${{ env.Previous_Tag }}"

          # Generate the commit summary between the two tags
          commit_summary=$(git log --oneline --pretty=tformat:"%h %s" "${{ env.Previous_Tag }}..$new_tag")

          # Print the commit summary to the log
          echo "Commit Summary:"
          echo "$commit_summary"

          # Save the commit summary to a file and then read it into an environment variable
          echo "COMMIT_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$commit_summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set up Visual Studio
        uses: microsoft/setup-msbuild@v2

      - name: Print GitHub Ref
        run: echo "GitHub ref $GITHUB_REF"

      - name: Extract Version Components
        id: extract_version
        shell: bash
        run: |
          VERSION_REGEX="^refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ "$GITHUB_REF" =~ $VERSION_REGEX ]]; then
            echo "MAJOR=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "MINOR=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "PATCH=${BASH_REMATCH[3]}" >> $GITHUB_ENV
          else
            echo "The tag format is invalid $GITHUB_REF" >&2
            exit 1
          fi

      - name: Configure CMake
        run: cmake -B build -S . -G "Visual Studio 17 2022" -DVER_MAJOR=${{ env.MAJOR }} -DVER_MINOR=${{ env.MINOR }} -DVER_PATCH=${{ env.PATCH }}

      - name: Build with CMake - Debug
        run: cmake --build build --config Debug

      - name: Build with CMake - Release
        run: cmake --build build --config Release

      - name: Create Release Directory
        run: mkdir release

      - name: Copy Build Artifacts
        run: |
          echo f | xcopy Output\Release\UnchainedPlugin.dll release\UnchainedPlugin.dll /E /Y
          echo f | xcopy Output\Debug\UnchainedPlugin.dll release\UnchainedPlugin_dbg.dll /E /Y

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: release
        
      # - name: Get commit summary
      #   uses: Knutschbert/commit-summary@v4
      #   id: get_commit_summary
      #   with:
      #     ref: ${{ github.ref }}
      
      - name: Generate and Print Commit Summary
        id: get_commit_summary
        shell: sh
        run: |
          new_tag=${{ github.ref }}
          previous_tag=$(git tag --sort=-creatordate | sed -n 2p)
          commit_summary=$(git log --oneline --pretty=tformat:"%h %s" $previous_tag..$new_tag)
          
          # Print the commit summary to the log
          echo "Commit Summary:"
          echo "$commit_summary"

          # Save the commit summary to a file and then read it into an environment variable
          echo "COMMIT_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$commit_summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            Commits for ${{ github.ref }}:
            ${{ steps.get_commit_summary.outputs.summary }}

      - name: Upload Release Assets - Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/UnchainedPlugin.dll
          asset_name: UnchainedPlugin.dll
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Debug
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/UnchainedPlugin_dbg.dll
          asset_name: UnchainedPlugin_dbg.dll
          asset_content_type: application/octet-stream
